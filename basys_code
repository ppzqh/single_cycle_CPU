module TOP(input clk, pulse, Reset, input[1:0] SW_in, output PCWre, output [3:0] position, output [7:0]dispcode);
    wire sign, zero, ExtSel, InsMemRW, RegDst, RegWre, ALUSrcA, ALUSrcB, RD, WR, DBDataSrc;
    wire [1:0] PCSrc;
    wire [2:0] ALUOp;
    wire [7:0] PC4, nextPC, curPC, writeData, readData1, readData2, A, B, result, Extend_Imme, dataOut;
    wire [31:0] instruction;
    wire [4:0] write;
    PCUnit pc(pulse, Reset, PCWre, nextPC,curPC, PC4);
    InstructMem in(InsMemRW, curPC, instruction);
    choose5 c5(RegDst, instruction[15:11], instruction[20:16], write);
    RegisterFile re(pulse, Reset, RegWre, instruction[25:21],instruction[20:16], write, writeData, readData1, readData2);
    ControlUnit co(sign, zero, Reset, instruction[31:26], PCWre, ExtSel, InsMemRW, RegDst, RegWre, ALUSrcA, ALUSrcB, RD, WR, DBDataSrc, PCSrc, ALUOp);
    choose32 c321(ALUSrcA, {{3{1'b0}},instruction[10:6]}, readData1, A);
    choose32 c322(ALUSrcB, Extend_Imme, readData2, B);
    ALU al(ALUOp, A, B, sign, zero, result);
    ExtendUnit ex(ExtSel, instruction[15:0], Extend_Imme);
    DataMem da(pulse, RD, WR, result, readData2, dataOut);
    choose32 c323(DBDataSrc,dataOut, result, writeData);
    PcChoose pcc(PCSrc, PC4, Extend_Imme, instruction, nextPC);
    
    wire CLK;
    wire [1:0] count;
    wire [7:0] show1, show2;
    wire [3:0] x;
    divide DD(clk, 30'D100000, CLK);
    choose_show CC(SW_in, curPC, nextPC, readData1, readData2,result,writeData,instruction[25:21], instruction[20:16],show1, show2 );
    count4 AS(CLK, count);
    chooseNUM baobei(count, show1, show2, x);
    NUMPOS nn(count, position);
    seg_7 sss(x, dispcode);
endmodule


//1.PCWre判断是否停机 2.curPC为当前指令地址，PC4 = PC + 4 3.上升沿触发
module PCUnit(input clk, Reset, PCWre, input [7:0] nextPC, output reg [7:0] curPC, PC4);//
  always@ (posedge clk or negedge Reset) begin
    if (Reset == 1'b0) curPC = 8'h00;
    else if (PCWre == 1'b1) curPC = nextPC;
    //
    PC4 = nextPC + 4;
  end
endmodule


//根据信号及地址读出指令
module InstructMem (input InsMemRW, input [7:0] InsAddr, output reg [31:0] Instruction);
  reg [7:0] ROM [0:71];
  /*initial begin
    $readmemb("F:/rom_data.txt", ROM);
  end*/
  initial begin
    {ROM[0], ROM[1], ROM[2], ROM[3]} = 32'b00000100000000010000000000001000;
    {ROM[4], ROM[5], ROM[6], ROM[7]} = 32'b01000000000000100000000000000010;
    {ROM[8], ROM[9], ROM[10], ROM[11]} = 32'b00000000010000010001100000000000;
    {ROM[12], ROM[13], ROM[14], ROM[15]} = 32'b00001000011000100010100000000000;
    {ROM[16], ROM[17], ROM[18], ROM[19]} = 32'b01000100101000100010000000000000;
    {ROM[20], ROM[21], ROM[22], ROM[23]} = 32'b01001000100000100100000000000000;
    {ROM[24], ROM[25], ROM[26], ROM[27]} = 32'b01100000000010000100000001000000;
    {ROM[28], ROM[29], ROM[30], ROM[31]} = 32'b11000101000000011111111111111110;
    {ROM[32], ROM[33], ROM[34], ROM[35]} = 32'b01110000010000010011000000000000;
    {ROM[36], ROM[37], ROM[38], ROM[39]} = 32'b01110000110000000011100000000000;
    {ROM[40], ROM[41], ROM[42], ROM[43]} = 32'b00000100111001110000000000001000;
    {ROM[44], ROM[45], ROM[46], ROM[47]} = 32'b11000000111000011111111111111110;
    {ROM[48], ROM[49], ROM[50], ROM[51]} = 32'b10011000001000100000000000000100;
    {ROM[52], ROM[53], ROM[54], ROM[55]} = 32'b10011100001010010000000000000100;
    {ROM[56], ROM[57], ROM[58], ROM[59]} = 32'b11001001001000000000000000000001;
    {ROM[60], ROM[61], ROM[62], ROM[63]} = 32'b11111100000000000000000000000000;
    {ROM[64], ROM[65], ROM[66], ROM[67]} = 32'b00000100000010011111111111111111;
    {ROM[68], ROM[69], ROM[70], ROM[71]} = 32'b11100000000000000000000000001110;
  end
  always@(InsMemRW or InsAddr)begin
    if (InsMemRW == 1) Instruction = {{ROM[InsAddr]},{ROM[InsAddr + 1]},{ROM[InsAddr + 2]},{ROM[InsAddr + 3]}};
    else Instruction = 0;
  end
endmodule

//根据信号选择A/B,用于选择rd/rt
module choose5(input signal, input [4:0] A, B, output[4:0] C);
  assign C = (signal == 1)? A: B;
endmodule

//下降沿触发
module RegisterFile(input clk, RST, RegWre, input [4:0] read1, read2, write, input [7:0] writeData, output [7:0] readData1, readData2);
  reg [7:0] REGS[1:31];
  assign readData1 = (read1 == 0)? 0: REGS[read1];
  assign readData2 = (read2 == 0)? 0: REGS[read2];
  integer i;
  always@(negedge clk or negedge RST)begin
    if (RST == 0)begin
      for (i = 1; i < 32; i = i + 1)
        REGS[i] <= 0;
    end
    else if (RegWre == 1 && write != 0)
      REGS[write] <= writeData;
  end
endmodule


//根据控制信号真值表发出控制信号
module ControlUnit(input sign, zero, Reset, input [5:0] op, output reg PCWre, ExtSel, InsMemRW, RegDst, RegWre, ALUSrcA, ALUSrcB, RD, WR, DBDataSrc, output reg [1:0] PCSrc, output reg [2:0] ALUOp);
  initial begin 
    InsMemRW <= 1;
  end
  always@(sign or zero or op or Reset)begin
    if (op == 6'b111000) PCSrc <= 2'b10;
    else if (op == 6'b110000 && zero == 1) PCSrc <= 2'b01;
    else if (op == 6'b110001 && zero == 0) PCSrc <= 2'b01;
    else if (op == 6'b110010 && sign == 0 && zero == 0) PCSrc <= 2'b01;
    else PCSrc <= 2'b00;
    PCWre <= (op != 6'b111111 && Reset != 0);
    ALUSrcA <= (op == 6'b011000); //sll
    ALUSrcB <= (op == 6'b000001 || op == 6'b010000 || op == 6'b100110 || op == 6'b100111); //ori addi sw lw
    DBDataSrc <= (op == 6'b100111); //lw
    RegWre <= !(op == 6'b100110 || op == 6'b110000 || op == 6'b110001 || op == 6'b110010 || op == 6'b111000 || op == 6'b111111); //R-type lw
    InsMemRW <= 1;
    RD <= (op != 6'b100111); //lw时为0
    WR <= (op != 6'b100110); //sw时为0
    RegDst <= !(op == 6'b000001 || op == 6'b010000 || op == 6'b100111); //除ori addi lw
    ExtSel <= !(op == 6'b011000 || op == 6'b010000);
    if (op[5:1] == 5'b00000 || op[5:1] == 5'b10011) ALUOp <= 3'b000; //add addi sw lw
    else if (op[5:2] == 4'b1100 || op == 6'b000010) ALUOp <= 3'b001; //b sub
    else if (op == 6'b010000 || op == 6'b010010) ALUOp <= 3'b011; //ori or
    else if (op == 6'b010001) ALUOp <= 3'b100; //and
    else if (op == 6'b011000) ALUOp <= 3'b010; //sll
    else if (op == 6'b011100) ALUOp <= 3'b110; //slt
    else ALUOp <= 3'b111;
    end
endmodule

//根据信号选择A/B,用于ALU输入的选择及寄存器组写入数据来源的选择
module choose32(input signal, input [7:0] A, B, output[7:0] C);
  assign C = (signal == 1)? A: B;
endmodule

//根据ALUOp运算
module ALU(input [2:0] ALUOp, input [7:0] A, B, output sign, zero, output reg [7:0] result);
  assign zero = (result == 0);
  assign sign = result[7];
  always@(ALUOp or A or B)begin
    case(ALUOp)
      3'b000: result = A + B;
      3'b001: result = A - B;
      3'b010: result = B << A;
      3'b011: result = A | B;
      3'b100: result = A & B;
      3'b101: result = A < B;
      3'b110: begin //小于为1
        if (A < B && A[7] == B[7])result = 1;
        else if (A[7] && !B[7]) result = 1;
        else result = 0;
        end
      3'b111: result = A ^ B;
    endcase
  end
endmodule

//零扩展或符号扩展
module ExtendUnit(input ExtSel, input [15:0] immediate, output [7:0] Extend_Imme);
  assign Extend_Imme = immediate[7:0];
endmodule

//下降沿触发, RD,WR低电平有效
module DataMem(input clk, RD, WR, input [7:0] dataAddr, dataIn, output [7:0] dataOut);
  reg[7:0] RAM[0: 60];
  assign dataOut = (RD == 0)? RAM[dataAddr] : 8'hzz;
  always@(negedge clk)begin
    if (WR == 0) RAM[dataAddr] = dataIn;
  end
endmodule

//根据控制信号选择下一指令的地址
module PcChoose(input [1:0] PCSrc, input [7:0] PC4, Extend_Imme, input [31:0]instruction, output reg [7:0] PCnext);
  initial begin
    PCnext = 0;
  end
  always @(PCSrc or PC4 or Extend_Imme or instruction)begin
    case(PCSrc)
      2'b00: PCnext <= PC4;
      2'b01: PCnext <= PC4 + Extend_Imme * 4;
      2'b10: PCnext <= {instruction[5:0], 2'b00};
      default: PCnext <= 8'h00;
    endcase
  end
endmodule


module divide(clk, n, clkout);
    input clk;
    input [30: 0] n;//分频倍数
    output clkout;
    reg clkout;
    reg [39: 0] temp;
    initial begin
            clkout = 1;
            temp = 0;
    end
    always@(posedge clk) 
                begin
                    temp = temp + 1;
                    if (temp == n / 2)begin
                        clkout = 0;//一半时间时翻转
                    end
                    if (temp == n)begin
                        clkout = 1;
                        temp = 0;//完整脉冲，再次翻转
                    end
                end
endmodule


module choose_show(input [1:0] SW_in, input [7:0] curPC, nextPC, readData1, readData2,result,resultDB,input [4:0]read1, read2, output reg[7:0] show1, show2 );
    always@(*)begin
        if (SW_in == 2'b00) {show1, show2} = {curPC, nextPC};
        else if (SW_in == 2'b01) {show1, show2} = {3'b000, read1, readData1};
        else if (SW_in == 2'b10) {show1, show2} = {3'b000, read2, readData2};
        else {show1, show2} = {result, resultDB};
    end
endmodule

module count4(input CLK, output reg[1:0] count);
    initial begin 
        count = 2'b00;
    end
    always @(negedge CLK) count = count + 1;
endmodule


module chooseNUM(input [1:0]count,input [7:0] show1, show2, output reg[3:0]x);
    always@(*) begin
        if (count == 2'b00) x = show1[7:4];
        else if (count == 2'b01) x = show1[3:0];
        else if (count == 2'b10) x = show2[7:4];
        else if (count == 2'b11) x = show2[3:0];
    end
endmodule

module NUMPOS(num, position);
    input [1: 0]num;
    output [3: 0] position;
    reg [3: 0] position;
    always@(*)begin
        case(num)
            2'b00:position = 4'b0111;
            2'b01:position = 4'b1011;
            2'b10:position = 4'b1101;
            2'b11:position = 4'b1110;
        endcase
    end
endmodule


module seg_7(input [3:0] num, output reg[7:0] dispcode);
    always@(num)begin
        case(num)
         4'b0000 : dispcode = 8'b1100_0000;  //0；'0'-亮灯，'1'-熄灯         
         4'b0001 : dispcode = 8'b1111_1001;  //1         
         4'b0010 : dispcode = 8'b1010_0100;  //2         
         4'b0011 : dispcode = 8'b1011_0000;  //3         
         4'b0100 : dispcode = 8'b1001_1001;  //4         
         4'b0101 : dispcode = 8'b1001_0010;   //5         
         4'b0110 : dispcode = 8'b1000_0010;  //6          
         4'b0111 : dispcode = 8'b1101_1000;  //7         
         4'b1000 : dispcode = 8'b1000_0000;  //8         
         4'b1001 : dispcode = 8'b1001_0000;  //9         
         4'b1010 : dispcode = 8'b1000_1000;  //A         
         4'b1011 : dispcode = 8'b1000_0011;  //b         
         4'b1100 : dispcode = 8'b1100_0110;  //C         
         4'b1101 : dispcode = 8'b1010_0001;  //d         
         4'b1110 : dispcode = 8'b1000_0110;  //E         
         4'b1111 : dispcode = 8'b1000_1110; //F         
         default : dispcode = 8'b0000_0000;  //不亮     
        endcase
    end
endmodule
