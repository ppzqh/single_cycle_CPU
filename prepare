根据以上数据通路，单周期CPU可划分为以下几个模块：
//1.PCWre判断是否停机 2.curPC为当前指令地址，PC4 = PC + 4 3.上升沿触发
module PCUnit(input clk, Reset, PCWre, input [31:0] nextPC, output [31:0] curPC, PC4);
//根据信号及地址读出指令
module InstructMem (input InsMemRW, input [31:0] InsAddr, output [31:0] Instruction);
//根据控制信号真值表发出控制信号
module ControlUnit(input sign, zero, input [5:0] op, output Reset, PCWre, ExtSel, InsMemRW, RegDst, RegWre, ALUSrcA, ALUSrcB, RD, WR, DBDataSrc, output [1:0] PCSrc, output [2:0] ALUOp );
//下降沿触发
module RegisterFile(input clk, RegWre, input [4:0] read1, read2, write, input [31:0] writeData, output [31:0] readData1, readData2);
//根据ALUOp运算
module ALU(input [2:0] ALUOp, input [31:0] A, B, output sign, zero, output [31:0] result);
//下降沿触发, RD,WR低电平有效
module DataMem(input clk, RD, WR, input [31:0] dataAddr, dataIn, output [31:0] dataOut);
//零扩展或符号扩展
module ExtendUnit(input ExtSel, input [15:0] immediate, output [31:0] Extend_Imme);
//计算若为跳转指令的目标地址
module CalPCjump(input [26:0] Part, input [31:0] PC4, output [31:0] PCjump);
//计算若为分支指令的目标地址
module CalPCbranch(input [31:0] PC4, Extend_Imme, output [31:0] PCbranch);
//根据控制信号选择下一指令的地址
module PcChoose(input [1:0] PCSrc, input [31:0] PC4, PCbranch, PCjump, output [31:0] PCnext);
//根据信号选择A/B,用于ALU输入的选择及寄存器组写入数据来源的选择
module choose32(input signal, input [31:0] A, B, output[31:0] C);
//根据信号选择A/B,用于选择rd/rt
module choose5(input signal, input [4:0] A, B, output[4:0] C);
