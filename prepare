根据以上数据通路，单周期CPU可划分为以下几个模块：
//1.PCWre判断是否停机 2.curPC为当前指令地址，PC4 = PC + 4 3.上升沿触发
module PCUnit(input clk, Reset, PCWre, input [31:0] nextPC, output [31:0] curPC, PC4);
  always@(posedge clk or negedge)begin
    if (Reset == 1'b0) curPC = 32'h00000000;
    else if (PCWre) curPC = nextPC;
    PC4 = curPC + 4;
  end
endmodule

//根据信号及地址读出指令
module InstructMem (input InsMemRW, input [31:0] InsAddr, output reg [31:0] Instruction);
  reg [7:0] ROM [0:99];
  initial begin
    $readmemb("in.txt", ROM[0]);
  end
  always@(InsMemRW or InsAddr)begin
    if (InsMemRW == 1) Instruction = {{ROM[InsAddr]},{ROM[InsAddr + 1]},{ROM[InsAddr + 2]},{ROM[InsAddr + 3]}};
  end
endmodule

//根据控制信号真值表发出控制信号
module ControlUnit(input sign, zero, input [5:0] op, output reg Reset, PCWre, ExtSel, InsMemRW, RegDst, RegWre, ALUSrcA, ALUSrcB, RD, WR, DBDataSrc, output reg [1:0] PCSrc, output reg [2:0] ALUOp);
  always@(sign or zero or op)begin
    if (op == 6'b111000) PCSrc = 2'b10;
    else if (op == 6'b110000 && zero == 1) PCSrc = 2'b01;
    else if (op == 6'b000001 && zero == 0) PCSrc = 2'b01;
    else if (op == 6'b000010 && sign == 0 && zero == 0) PCSrc = 2'b01;
    else PCSrc = 2'b00;
    case(op)
      6'b000000:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b1100011111x000; //add
      6'b000001:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b11010111101000; //addi
      6'b000010:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b1100011111x001; //sub
      6'b010000:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b11010111100011; //ori
      6'b010001:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b1100011111x100; //and
      6'b010010:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b1100011111x011; //or
      6'b011000:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b11100111110010; //sll
      6'b011100:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b1100011111x110; //slt
      6'b100110:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b1101x0110x1000; //sw 
      6'b100111:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b11011110101000; //lw
      6'b110000:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b1100x0111x1001; //beq
      6'b110001:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b1100x0111x1001; //bne
      6'b110010:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b1100x0111x1001; //bgtz
      6'b111000:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b11xxx0111xxxxx; //j
      6'b111111:{{Reset}, {PCWre}, {ALUSrcA}, {ALUSrcB}, {DBDataSrc}, {RegWre}, {InsMemRW}, {RD}, {WR}, {RegDst}, {ExtSel}, {ALUOp}} = 14'b10xxx0111xxxxx; //halt
    endcase
  end
endmodule

//下降沿触发
module RegisterFile(input clk, RST, RegWre, input [4:0] read1, read2, write, input [31:0] writeData, output [31:0] readData1, readData2);
  reg [31:0] REGS[31, 1];
  assign readData1 = (read1 == 0)? 0: REGS[read1];
  assign readData2 = (read2 == 0)? 0: REGS[read2];
  integer i;
  always@(negedge clk or negedge RST)begin
    if (RST == 0)begin
      for (i = 1; i < 32; i = i + 1)
        REGS[i] = 0;
    end
    else if (RegWre == 1 && write != 0)
      REGS[write] = writeData;
  end
endmodule

//根据ALUOp运算
module ALU(input [2:0] ALUOp, input [31:0] A, B, output sign, zero, output reg [31:0] result);
  assign zero = (result == 0);
  assign sign = result[31];
  always@(ALUOp or A or B)begin
    case(ALUOp)
      3'b000: result = A + B;
      3'b001: result = A - B;
      3'b010: result = B << A;
      3'b011: result = A | B;
      3'b100: result = A & B;
      3'b101: result = A < B;
      3'b110: begin //小于为1
        if (A < B && A[31] == B[31])result = 1;
        else if (A[31] && !B[31]) result = 1;
        else result = 0;
        end
      3'b111: result = A ^ B;
    endcase
  end
endmodule

//下降沿触发, RD,WR低电平有效
module DataMem(input clk, RD, WR, input [31:0] dataAddr, dataIn, output [31:0] dataOut);
  reg[7:0] RAM[0, 60];
  assign dataOut = (RD == 0)? {{RAM[dataAddr]}, {RAM[dataAddr + 1]}, {RAM[dataAddr + 2]}, {RAM[dataAddr + 3]}}: 32'hzzzzzzzz;
  always@(negedge clk)begin
    if (WR == 0) {{RAM[dataAddr]}, {RAM[dataAddr + 1]}, {RAM[dataAddr + 2]}, {RAM[dataAddr + 3]}} = dataIn;
  end
endmodule

//零扩展或符号扩展
module ExtendUnit(input ExtSel, input [15:0] immediate, output [31:0] Extend_Imme);
  assign Extend_Imme = (ExtSel == 0)? {{16'h0000}, {immediate}}: {16{immediate[15]}, {immediate}};
endmodule

//根据控制信号选择下一指令的地址
module PcChoose(input [1:0] PCSrc, input [31:0] PC4, Extend_Imme, instruction, output reg [31:0] PCnext);
  always @(PCSrc or PC4 or Extend_Imme or instruction)begin
    case(PCSrc)
      2'b00: PCnext = PC4;
      2'b01: PCnext = PC4 + Extend_Imme;
      2'b10: PCnext = {{PC[31, 28]}, {instruction[25, 0]}, 2'b00};
    endcase
  end
endmodule

//根据信号选择A/B,用于ALU输入的选择及寄存器组写入数据来源的选择
module choose32(input signal, input [31:0] A, B, output[31:0] C);
  assign C = (signal == 1)? A: B;
endmodule

//根据信号选择A/B,用于选择rd/rt
module choose5(input signal, input [4:0] A, B, output[4:0] C);
  assign C = (signal == 1)? A: B;
endmodule




//计算若为跳转指令的目标地址
module CalPCjump(input [26:0] Part, input [31:0] PC4, output [31:0] PCjump);
//计算若为分支指令的目标地址
module CalPCbranch(input [31:0] PC4, Extend_Imme, output [31:0] PCbranch);
