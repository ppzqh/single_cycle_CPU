module TOP(input clk,Reset);
    wire sign, zero, PCWre, ExtSel, InsMemRW, RegDst, RegWre, ALUSrcA, ALUSrcB, RD, WR, DBDataSrc;
    wire [1:0] PCSrc;
    wire [2:0] ALUOp;
    wire [31:0] PC4, nextPC, curPC, writeData, readData1, readData2, A, B, result, Extend_Imme, dataOut;
    wire [31:0] instruction;
    wire [4:0] write;
    PCUnit pc(clk, Reset, PCWre, nextPC,curPC, PC4);
    InstructMem in(InsMemRW, curPC, instruction);
    choose5 c5(RegDst, instruction[15:11], instruction[20:16], write);
    RegisterFile re(clk, Reset, RegWre, instruction[25:21],instruction[20:16], write, writeData, readData1, readData2);
    ControlUnit co(sign, zero, Reset, instruction[31:26], PCWre, ExtSel, InsMemRW, RegDst, RegWre, ALUSrcA, ALUSrcB, RD, WR, DBDataSrc, PCSrc, ALUOp);
    choose32 c321(ALUSrcA, {{27{1'b0}},instruction[10:6]}, readData1, A);
    choose32 c322(ALUSrcB, Extend_Imme, readData2, B);
    ALU al(ALUOp, A, B, sign, zero, result);
    ExtendUnit ex(ExtSel, instruction[15:0], Extend_Imme);
    DataMem da(clk, RD, WR, result, readData2, dataOut);
    choose32 c323(DBDataSrc,dataOut, result, writeData);
    PcChoose pcc(PCSrc, PC4, Extend_Imme, instruction, nextPC);
endmodule

//1.PCWre判断是否停机 2.curPC为当前指令地址，PC4 = PC + 4 3.上升沿触发
module PCUnit(input clk, Reset, PCWre, input [31:0] nextPC, output reg [31:0] curPC, PC4);
  always@ (posedge clk or negedge Reset) begin
    if (Reset == 1'b0) curPC = 32'h00000000;
    else if (PCWre) curPC = nextPC;
    PC4 = curPC + 4;
  end
endmodule

//根据信号及地址读出指令
module InstructMem (input InsMemRW, input [31:0] InsAddr, output reg [31:0] Instruction);
  reg [7:0] ROM [0:99];
  initial begin
    $readmemb("F:/rom_data.txt", ROM);
  end
  always@(InsMemRW or InsAddr)begin
    if (InsMemRW == 1) Instruction = {{ROM[InsAddr]},{ROM[InsAddr + 1]},{ROM[InsAddr + 2]},{ROM[InsAddr + 3]}};
  end
endmodule

module choose5(input signal, input [4:0] A, B, output[4:0] C);
  assign C = (signal == 1)? A: B;
endmodule

//下降沿触发
module RegisterFile(input clk, RST, RegWre, input [4:0] read1, read2, write, input [31:0] writeData, output [31:0] readData1, readData2);
  reg [31:0] REGS[1:31];
  assign readData1 = (read1 == 0)? 0: REGS[read1];
  assign readData2 = (read2 == 0)? 0: REGS[read2];
  integer i;
  always@(negedge clk or negedge RST)begin
    if (RST == 0)begin
      for (i = 1; i < 32; i = i + 1)
        REGS[i] <= 0;
    end
    else if (RegWre == 1 && write != 0)
      REGS[write] <= writeData;
  end
endmodule

//根据控制信号真值表发出控制信号
module ControlUnit(input sign, zero, Reset, input [5:0] op, output reg PCWre, ExtSel, InsMemRW, RegDst, RegWre, ALUSrcA, ALUSrcB, RD, WR, DBDataSrc, output reg [1:0] PCSrc, output reg [2:0] ALUOp);
  initial begin 
    InsMemRW <= 1;
  end
  always@(sign or zero or op or Reset)begin
    if (op == 6'b111000) PCSrc <= 2'b10;
    else if (op == 6'b110000 && zero == 1) PCSrc <= 2'b01;
    else if (op == 6'b110001 && zero == 0) PCSrc <= 2'b01;
    else if (op == 6'b110010 && sign == 0 && zero == 0) PCSrc <= 2'b01;
    else PCSrc <= 2'b00;
    PCWre <= (op != 6'b111111 && Reset != 0);
    ALUSrcA <= (op == 6'b011000); //sll
    ALUSrcB <= (op == 6'b000001 || op == 6'b010000 || op == 6'b100110 || op == 6'b100111); //ori addi sw lw
    DBDataSrc <= (op == 6'b100111); //lw
    RegWre <= !(op == 6'b100110 || op == 6'b110000 || op == 6'b110001 || op == 6'b110010 || op == 6'b111000 || op == 6'b111111); //R-type lw
    InsMemRW <= 1;
    RD <= (op != 6'b100111); //lw时为0
    WR <= (op != 6'b100110); //sw时为0
    RegDst <= !(op == 6'b000001 || op == 6'b010000 || op == 6'b100111); //除ori addi lw
    ExtSel <= !(op == 6'b011000 || op == 6'b010000);
    if (op[5:1] == 5'b00000 || op[5:1] == 5'b10011) ALUOp <= 3'b000; //add addi sw lw
    else if (op[5:2] == 4'b1100 || op == 6'b000010) ALUOp <= 3'b001; //b sub
    else if (op == 6'b010000 || op == 6'b010010) ALUOp <= 3'b011; //ori or
    else if (op == 6'b010001) ALUOp <= 3'b100; //and
    else if (op == 6'b011000) ALUOp <= 3'b010; //sll
    else if (op == 6'b011100) ALUOp <= 3'b110; //slt
    else ALUOp <= 3'b111;
    end
endmodule

module choose32(input signal, input [31:0] A, B, output[31:0] C);
  assign C = (signal == 1)? A: B;
endmodule

//根据ALUOp运算
module ALU(input [2:0] ALUOp, input [31:0] A, B, output sign, zero, output reg [31:0] result);
  assign zero = (result == 0);
  assign sign = result[31];
  always@(ALUOp or A or B)begin
    case(ALUOp)
      3'b000: result = A + B;
      3'b001: result = A - B;
      3'b010: result = B << A;
      3'b011: result = A | B;
      3'b100: result = A & B;
      3'b101: result = A < B;
      3'b110: begin //小于为1
        if (A < B && A[31] == B[31])result = 1;
        else if (A[31] && !B[31]) result = 1;
        else result = 0;
        end
      3'b111: result = A ^ B;
    endcase
  end
endmodule

//零扩展或符号扩展
module ExtendUnit(input ExtSel, input [15:0] immediate, output [31:0] Extend_Imme);
  assign Extend_Imme = (ExtSel == 0)?{16'h0000,immediate}:{{16{immediate[15]}},immediate};
endmodule

//下降沿触发, RD,WR低电平有效
module DataMem(input clk, RD, WR, input [31:0] dataAddr, dataIn, output [31:0] dataOut);
  reg[7:0] RAM[0: 60];
  assign dataOut = (RD == 0)? {RAM[dataAddr],RAM[dataAddr + 1],RAM[dataAddr + 2],RAM[dataAddr + 3]} : 32'h00000000;
  always@(negedge clk)begin
    if (WR == 0) {RAM[dataAddr],RAM[dataAddr + 1],RAM[dataAddr + 2],RAM[dataAddr + 3]} = dataIn;
  end
endmodule

//根据控制信号选择下一指令的地址
module PcChoose(input [1:0] PCSrc, input [31:0] PC4, Extend_Imme, input [31:0]instruction, output reg [31:0] PCnext);
  initial begin
    PCnext = 0;
  end
  always @(PCSrc or PC4 or Extend_Imme or instruction)begin
    case(PCSrc)
      2'b00: PCnext <= PC4;
      2'b01: PCnext <= PC4 + Extend_Imme * 4;
      2'b10: PCnext <= {instruction[5:0], 2'b00};
      default: PCnext <= 32'h00000000;
    endcase
  end
endmodule
